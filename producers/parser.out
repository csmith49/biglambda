Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> type
Rule 1     type -> mono
Rule 2     type -> poly
Rule 3     poly -> QUANT varlist DOT mono
Rule 4     varlist -> var
Rule 5     varlist -> var COMMA varlist
Rule 6     mono -> OPEN mono CLOSE
Rule 7     mono -> base
Rule 8     mono -> var
Rule 9     mono -> constructor
Rule 10    constructor -> function
Rule 11    constructor -> list
Rule 12    constructor -> pair
Rule 13    function -> mono TO mono
Rule 14    list -> OPENLIST mono CLOSELIST
Rule 15    pair -> mono COMMA mono
Rule 16    base -> BASE
Rule 17    var -> VAR

Terminals, with rules where they appear

BASE                 : 16
CLOSE                : 6
CLOSELIST            : 14
COMMA                : 5 15
DOT                  : 3
OPEN                 : 6
OPENLIST             : 14
QUANT                : 3
TO                   : 13
VAR                  : 17
error                : 

Nonterminals, with rules where they appear

base                 : 7
constructor          : 9
function             : 10
list                 : 11
mono                 : 1 3 6 13 13 14 15 15
pair                 : 12
poly                 : 2
type                 : 0
var                  : 4 5 8
varlist              : 3 5

Parsing method: LALR

state 0

    (0) S' -> . type
    (1) type -> . mono
    (2) type -> . poly
    (6) mono -> . OPEN mono CLOSE
    (7) mono -> . base
    (8) mono -> . var
    (9) mono -> . constructor
    (3) poly -> . QUANT varlist DOT mono
    (16) base -> . BASE
    (17) var -> . VAR
    (10) constructor -> . function
    (11) constructor -> . list
    (12) constructor -> . pair
    (13) function -> . mono TO mono
    (14) list -> . OPENLIST mono CLOSELIST
    (15) pair -> . mono COMMA mono

    OPEN            shift and go to state 10
    QUANT           shift and go to state 9
    BASE            shift and go to state 3
    VAR             shift and go to state 6
    OPENLIST        shift and go to state 13

    function                       shift and go to state 7
    list                           shift and go to state 8
    base                           shift and go to state 11
    mono                           shift and go to state 5
    type                           shift and go to state 4
    poly                           shift and go to state 2
    constructor                    shift and go to state 12
    pair                           shift and go to state 1
    var                            shift and go to state 14

state 1

    (12) constructor -> pair .

    TO              reduce using rule 12 (constructor -> pair .)
    COMMA           reduce using rule 12 (constructor -> pair .)
    $end            reduce using rule 12 (constructor -> pair .)
    CLOSE           reduce using rule 12 (constructor -> pair .)
    CLOSELIST       reduce using rule 12 (constructor -> pair .)


state 2

    (2) type -> poly .

    $end            reduce using rule 2 (type -> poly .)


state 3

    (16) base -> BASE .

    TO              reduce using rule 16 (base -> BASE .)
    COMMA           reduce using rule 16 (base -> BASE .)
    $end            reduce using rule 16 (base -> BASE .)
    CLOSE           reduce using rule 16 (base -> BASE .)
    CLOSELIST       reduce using rule 16 (base -> BASE .)


state 4

    (0) S' -> type .



state 5

    (1) type -> mono .
    (13) function -> mono . TO mono
    (15) pair -> mono . COMMA mono

    $end            reduce using rule 1 (type -> mono .)
    TO              shift and go to state 15
    COMMA           shift and go to state 16


state 6

    (17) var -> VAR .

    TO              reduce using rule 17 (var -> VAR .)
    COMMA           reduce using rule 17 (var -> VAR .)
    $end            reduce using rule 17 (var -> VAR .)
    CLOSELIST       reduce using rule 17 (var -> VAR .)
    DOT             reduce using rule 17 (var -> VAR .)
    CLOSE           reduce using rule 17 (var -> VAR .)


state 7

    (10) constructor -> function .

    TO              reduce using rule 10 (constructor -> function .)
    COMMA           reduce using rule 10 (constructor -> function .)
    $end            reduce using rule 10 (constructor -> function .)
    CLOSE           reduce using rule 10 (constructor -> function .)
    CLOSELIST       reduce using rule 10 (constructor -> function .)


state 8

    (11) constructor -> list .

    TO              reduce using rule 11 (constructor -> list .)
    COMMA           reduce using rule 11 (constructor -> list .)
    $end            reduce using rule 11 (constructor -> list .)
    CLOSE           reduce using rule 11 (constructor -> list .)
    CLOSELIST       reduce using rule 11 (constructor -> list .)


state 9

    (3) poly -> QUANT . varlist DOT mono
    (4) varlist -> . var
    (5) varlist -> . var COMMA varlist
    (17) var -> . VAR

    VAR             shift and go to state 6

    var                            shift and go to state 17
    varlist                        shift and go to state 18

state 10

    (6) mono -> OPEN . mono CLOSE
    (6) mono -> . OPEN mono CLOSE
    (7) mono -> . base
    (8) mono -> . var
    (9) mono -> . constructor
    (16) base -> . BASE
    (17) var -> . VAR
    (10) constructor -> . function
    (11) constructor -> . list
    (12) constructor -> . pair
    (13) function -> . mono TO mono
    (14) list -> . OPENLIST mono CLOSELIST
    (15) pair -> . mono COMMA mono

    OPEN            shift and go to state 10
    BASE            shift and go to state 3
    VAR             shift and go to state 6
    OPENLIST        shift and go to state 13

    function                       shift and go to state 7
    pair                           shift and go to state 1
    base                           shift and go to state 11
    mono                           shift and go to state 19
    list                           shift and go to state 8
    constructor                    shift and go to state 12
    var                            shift and go to state 14

state 11

    (7) mono -> base .

    TO              reduce using rule 7 (mono -> base .)
    COMMA           reduce using rule 7 (mono -> base .)
    $end            reduce using rule 7 (mono -> base .)
    CLOSE           reduce using rule 7 (mono -> base .)
    CLOSELIST       reduce using rule 7 (mono -> base .)


state 12

    (9) mono -> constructor .

    TO              reduce using rule 9 (mono -> constructor .)
    COMMA           reduce using rule 9 (mono -> constructor .)
    $end            reduce using rule 9 (mono -> constructor .)
    CLOSE           reduce using rule 9 (mono -> constructor .)
    CLOSELIST       reduce using rule 9 (mono -> constructor .)


state 13

    (14) list -> OPENLIST . mono CLOSELIST
    (6) mono -> . OPEN mono CLOSE
    (7) mono -> . base
    (8) mono -> . var
    (9) mono -> . constructor
    (16) base -> . BASE
    (17) var -> . VAR
    (10) constructor -> . function
    (11) constructor -> . list
    (12) constructor -> . pair
    (13) function -> . mono TO mono
    (14) list -> . OPENLIST mono CLOSELIST
    (15) pair -> . mono COMMA mono

    OPEN            shift and go to state 10
    BASE            shift and go to state 3
    VAR             shift and go to state 6
    OPENLIST        shift and go to state 13

    function                       shift and go to state 7
    pair                           shift and go to state 1
    base                           shift and go to state 11
    mono                           shift and go to state 20
    list                           shift and go to state 8
    constructor                    shift and go to state 12
    var                            shift and go to state 14

state 14

    (8) mono -> var .

    TO              reduce using rule 8 (mono -> var .)
    COMMA           reduce using rule 8 (mono -> var .)
    $end            reduce using rule 8 (mono -> var .)
    CLOSE           reduce using rule 8 (mono -> var .)
    CLOSELIST       reduce using rule 8 (mono -> var .)


state 15

    (13) function -> mono TO . mono
    (6) mono -> . OPEN mono CLOSE
    (7) mono -> . base
    (8) mono -> . var
    (9) mono -> . constructor
    (16) base -> . BASE
    (17) var -> . VAR
    (10) constructor -> . function
    (11) constructor -> . list
    (12) constructor -> . pair
    (13) function -> . mono TO mono
    (14) list -> . OPENLIST mono CLOSELIST
    (15) pair -> . mono COMMA mono

    OPEN            shift and go to state 10
    BASE            shift and go to state 3
    VAR             shift and go to state 6
    OPENLIST        shift and go to state 13

    function                       shift and go to state 7
    pair                           shift and go to state 1
    base                           shift and go to state 11
    mono                           shift and go to state 21
    list                           shift and go to state 8
    constructor                    shift and go to state 12
    var                            shift and go to state 14

state 16

    (15) pair -> mono COMMA . mono
    (6) mono -> . OPEN mono CLOSE
    (7) mono -> . base
    (8) mono -> . var
    (9) mono -> . constructor
    (16) base -> . BASE
    (17) var -> . VAR
    (10) constructor -> . function
    (11) constructor -> . list
    (12) constructor -> . pair
    (13) function -> . mono TO mono
    (14) list -> . OPENLIST mono CLOSELIST
    (15) pair -> . mono COMMA mono

    OPEN            shift and go to state 10
    BASE            shift and go to state 3
    VAR             shift and go to state 6
    OPENLIST        shift and go to state 13

    function                       shift and go to state 7
    pair                           shift and go to state 1
    base                           shift and go to state 11
    mono                           shift and go to state 22
    list                           shift and go to state 8
    constructor                    shift and go to state 12
    var                            shift and go to state 14

state 17

    (4) varlist -> var .
    (5) varlist -> var . COMMA varlist

    DOT             reduce using rule 4 (varlist -> var .)
    COMMA           shift and go to state 23


state 18

    (3) poly -> QUANT varlist . DOT mono

    DOT             shift and go to state 24


state 19

    (6) mono -> OPEN mono . CLOSE
    (13) function -> mono . TO mono
    (15) pair -> mono . COMMA mono

    CLOSE           shift and go to state 25
    TO              shift and go to state 15
    COMMA           shift and go to state 16


state 20

    (14) list -> OPENLIST mono . CLOSELIST
    (13) function -> mono . TO mono
    (15) pair -> mono . COMMA mono

    CLOSELIST       shift and go to state 26
    TO              shift and go to state 15
    COMMA           shift and go to state 16


state 21

    (13) function -> mono TO mono .
    (13) function -> mono . TO mono
    (15) pair -> mono . COMMA mono

  ! shift/reduce conflict for TO resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    $end            reduce using rule 13 (function -> mono TO mono .)
    CLOSE           reduce using rule 13 (function -> mono TO mono .)
    CLOSELIST       reduce using rule 13 (function -> mono TO mono .)
    TO              shift and go to state 15
    COMMA           shift and go to state 16

  ! TO              [ reduce using rule 13 (function -> mono TO mono .) ]
  ! COMMA           [ reduce using rule 13 (function -> mono TO mono .) ]


state 22

    (15) pair -> mono COMMA mono .
    (13) function -> mono . TO mono
    (15) pair -> mono . COMMA mono

  ! shift/reduce conflict for TO resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    CLOSELIST       reduce using rule 15 (pair -> mono COMMA mono .)
    $end            reduce using rule 15 (pair -> mono COMMA mono .)
    CLOSE           reduce using rule 15 (pair -> mono COMMA mono .)
    TO              shift and go to state 15
    COMMA           shift and go to state 16

  ! TO              [ reduce using rule 15 (pair -> mono COMMA mono .) ]
  ! COMMA           [ reduce using rule 15 (pair -> mono COMMA mono .) ]


state 23

    (5) varlist -> var COMMA . varlist
    (4) varlist -> . var
    (5) varlist -> . var COMMA varlist
    (17) var -> . VAR

    VAR             shift and go to state 6

    var                            shift and go to state 17
    varlist                        shift and go to state 27

state 24

    (3) poly -> QUANT varlist DOT . mono
    (6) mono -> . OPEN mono CLOSE
    (7) mono -> . base
    (8) mono -> . var
    (9) mono -> . constructor
    (16) base -> . BASE
    (17) var -> . VAR
    (10) constructor -> . function
    (11) constructor -> . list
    (12) constructor -> . pair
    (13) function -> . mono TO mono
    (14) list -> . OPENLIST mono CLOSELIST
    (15) pair -> . mono COMMA mono

    OPEN            shift and go to state 10
    BASE            shift and go to state 3
    VAR             shift and go to state 6
    OPENLIST        shift and go to state 13

    function                       shift and go to state 7
    pair                           shift and go to state 1
    base                           shift and go to state 11
    mono                           shift and go to state 28
    list                           shift and go to state 8
    constructor                    shift and go to state 12
    var                            shift and go to state 14

state 25

    (6) mono -> OPEN mono CLOSE .

    TO              reduce using rule 6 (mono -> OPEN mono CLOSE .)
    COMMA           reduce using rule 6 (mono -> OPEN mono CLOSE .)
    $end            reduce using rule 6 (mono -> OPEN mono CLOSE .)
    CLOSE           reduce using rule 6 (mono -> OPEN mono CLOSE .)
    CLOSELIST       reduce using rule 6 (mono -> OPEN mono CLOSE .)


state 26

    (14) list -> OPENLIST mono CLOSELIST .

    TO              reduce using rule 14 (list -> OPENLIST mono CLOSELIST .)
    COMMA           reduce using rule 14 (list -> OPENLIST mono CLOSELIST .)
    $end            reduce using rule 14 (list -> OPENLIST mono CLOSELIST .)
    CLOSE           reduce using rule 14 (list -> OPENLIST mono CLOSELIST .)
    CLOSELIST       reduce using rule 14 (list -> OPENLIST mono CLOSELIST .)


state 27

    (5) varlist -> var COMMA varlist .

    DOT             reduce using rule 5 (varlist -> var COMMA varlist .)


state 28

    (3) poly -> QUANT varlist DOT mono .
    (13) function -> mono . TO mono
    (15) pair -> mono . COMMA mono

    $end            reduce using rule 3 (poly -> QUANT varlist DOT mono .)
    TO              shift and go to state 15
    COMMA           shift and go to state 16

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for TO in state 21 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 21 resolved as shift
WARNING: shift/reduce conflict for TO in state 22 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 22 resolved as shift
